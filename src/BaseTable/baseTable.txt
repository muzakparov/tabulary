// const _colStructs = [
		// 	{
		// 		label: "label1",
		// 		cols: [
		// 			{
		// 				label: "label11",
		// 				cols: [
		// 					{
		// 						name: "id",
		// 						label: "ID"
		// 					},
		// 					{
		// 						name: "country",
		// 						label: "Country"
		// 					},
		// 				]
		// 			},
		// 			{
		// 				label: "label12",
		// 				cols: [
		// 					{
		// 						name: "name",
		// 						label: "Name",
		// 					},
		// 					{
		// 						name: "pre",
		// 						label: "Pre"
		// 					},
		// 				]
		// 			},
		// 		]
		// 	},
		// 	{
		// 		label: "label2",
		// 		cols: [
		// 			{
		// 				label: "label21",
		// 				cols: [
		// 					{
		// 						name: "live",
		// 						label: "Live"
		// 					},
		// 					{
		// 						name: "susp",
		// 						label: "Susp"
		// 					},
		// 				]
		// 			},
		// 			{
		// 				label: "label22",
		// 				cols: [
		// 					{
		// 						name: "end",
		// 						label: "End"
		// 					},
		// 					{
		// 						name: "n_events",
		// 						label: "Total"
		// 					},
		// 				]
		// 			},
		// 		]
		// 	}
		// ]

USAGE:

render() {
		this.renderCount++
		const { props } = this

		const _colStructs = [
			{
				name: "id",
				label: "ID"
			},
			{
				name: "country",
				label: "Country",

				// compareByMethod:(a,b,c)=>{
				// 	if(a["country"][a["country"].length-1]>b["country"][b["country"].length-1]){
				// 		return 1
				// 	}else if(a["country"][a["country"].length-1]>b["country"][b["country"].length-1]){
				// 		return -1
				// 	}

				// 	return 0
				// }

				// compareByMethod:(el, nextEl, selectedColName)=>{
				// 	const elVal=el[selectedColName]
				// 	const nextElVal=nextEl[selectedColName]

				// 	const elValLastStr=elVal[elVal.length-1]
				// 	const nextElValLastStr=nextElVal[nextElVal.length-1]
				// 	if(elValLastStr>nextElValLastStr) return -1
				// 	else if(elValLastStr<nextElValLastStr) return 1
				// 	return 0
				// },
			},
			{
				name: "name",
				label: "Name",

				compareByMethod: (el, next, selectedColName) => { },
			},
			{
				name: "pre",
				label: "Pre",
				defaultSortOrderDesc: false
			},
			{
				name: "live",
				label: "Live"
			},
			{
				name: "susp",
				label: "Susp"
			},
			{
				name: "end",
				label: "End"
			},
			{
				name: "n_events",
				label: "Total"
			},
		]

		const _idName = "id"

		return (
			<div>
				<BaseTable
					rows={this.props.competitions}

					cols={_colStructs}

					idName={_idName}
					onRowSelect={(row) => {
						props.history.push(`${props.baseLink}/${encodeURIComponent(row.name)}/${encodeURIComponent(row.id)}/events/markets`)
					}
					}

					isShowIdsAsRowNum={true}
					isShowSearch={true}

					defaultSortOrderDesc={true}
					defaultSorted={
						[
							{
								name: "pre",
								desc: true
							},
							{
								name: "country",
								desc: false
							},

						]
					}

				// sortable={true}

				// defaultCompareByMethod={(a,b,c)=>{
				// 	if(a[c]>b[c]) return 1
				// 	if(a[c]<b[c]) return -1
				// 	return 0
				// }}
				/>
			</div>
		)
	}